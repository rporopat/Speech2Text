{"version":3,"sources":["media/a.png","media/b.png","media/c.png","ReactSpeech.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","text","ReactSpeech","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","console","log","downloadContent","resetText","window","location","reload","state","isRecording","SpeechRecognition","webkitSpeechRecognition","onClick","bind","assertThisInitialized","startRecording","stopRecording","recognition","lang","interimResults","addEventListener","event","Array","from","results","r","map","result","transcript","join","onText","start","setState","stop","nextProps","nextState","name","content","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","react_default","a","className","style","color","placeholder","onChange","value","rows","cols","Component","App","Sky_default","images","0","1","b","2","c","how","time","size","background","src_ReactSpeech_0","t","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4c85df6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/a.6d28c665.png\";","module.exports = __webpack_public_path__ + \"static/media/b.61bbc30d.png\";","module.exports = __webpack_public_path__ + \"static/media/c.413af027.png\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ReactSpeech.css';\r\nimport 'tachyons'\r\n\r\nlet text = '';\r\n\r\nclass ReactSpeech extends Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isRecording: false\r\n    };\r\n\r\n    // check if SpeechRecognition is supported\r\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\n    if (!window.SpeechRecognition) {\r\n      console.log('SpeechRecognition is not supported from your browser!');\r\n      return;\r\n    }\r\n\r\n    // Bind functions\r\n    this.onClick = this.onClick.bind(this);\r\n    this.startRecording = this.startRecording.bind(this);\r\n    this.stopRecording = this.stopRecording.bind(this);\r\n\r\n    // Init the recognition object\r\n    this.recognition = new window.SpeechRecognition();\r\n\r\n    // TODO: validate lang property as BCP 47 format\r\n    this.recognition.lang = this.props.lang;\r\n    this.recognition.interimResults = true;\r\n\r\n    // Update recording flag and UI\r\n    this.recognition.addEventListener('end', this.stopRecording);\r\n\r\n    // On result emit the event to parent scope\r\n    this.recognition.addEventListener('result', (event) => {\r\n      text = Array.from(event.results, function(r) {\r\n        return r[0]\r\n      }).map(function(result) {\r\n        return result.transcript;\r\n      }).join('');\r\n      this.props.onText(text);\r\n    });\r\n  }\r\n\r\n  onClick() {\r\n    this.state.isRecording ? this.stopRecording() : this.startRecording();\r\n  }\r\n\r\n  handleClick = () => {\r\n    console.log('Clicked: ' + text);\r\n    this.downloadContent('Content.txt', text)\r\n  }\r\n\r\n  resetText = () => {\r\n    window.location.reload()\r\n  }\r\n\r\n  startRecording() {\r\n    this.recognition.start();\r\n    this.setState({\r\n      isRecording: true\r\n    });\r\n  }\r\n\r\n  stopRecording() {\r\n    this.recognition.stop();\r\n    this.setState({\r\n      isRecording: false\r\n    });\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    this.recognition.lang = nextProps.lang;\r\n  }\r\n\r\n  downloadContent(name, content) {\r\n    console.log('Download activated: ' + text);\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([content], {type: 'text/plain'});\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = name;\r\n    element.click();\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className='flex flex-column items-center'>\r\n        <div className={'react-speech ' + (this.state.isRecording ? 'recording' : '')} onClick={this.onClick}>\r\n          <span>{this.state.isRecording}</span>\r\n        </div>\r\n        <div className='flex flex-column items-center pt4'>\r\n          <textarea className='br3 bg-moon-light bg-transparent tc' style={{color:'white'}} placeholder='Text' onChange={() => console.log(text)} value={text} rows=\"8\" cols=\"70\"></textarea>\r\n          <br/><button className='f6 link dim br3 ba bw1 ph3 pv2 mb2 dib dark-gray' onClick={this.handleClick}>Download</button>\r\n          <button className='f6 link dim br3 ba bw1 ph3 pv2 mb2 dib dark-pink' onClick={this.resetText}>Reset</button>\r\n        </div> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// For a complete list of options\r\n// @see https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition\r\nReactSpeech.propTypes = {\r\n  lang: PropTypes.string,\r\n  onText: PropTypes.func\r\n}\r\n\r\nexport default ReactSpeech;","import React, { Component } from 'react';\nimport './App.css';\nimport ReactSpeech from './ReactSpeech';\nimport './ReactSpeech.css';\nimport 'tachyons'\nimport Sky from 'react-sky'\nimport a from \"./media/a.png\"\nimport b from \"./media/b.png\"\nimport c from \"./media/c.png\"\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='flex flex-column items-center pt7'>\n        <Sky\n            images={{\n              /* FORMAT AS FOLLOWS */\n              0: a,  /* You can pass as many images as you want */\n              1: b,\n              2: c,\n              //1: \"https://linkToYourImage1\",\n              //2: myImage /* you can pass images in any form: link, imported via webpack... */\n              /* 3: your other image... */\n              /* 4: your other image... */\n              /* 5: your other image... */\n              /* ... */\n            }}\n            how={50} /* Pass the number of images Sky will render chosing randomly */\n            time={40} /* time of animation */\n            size={'70px'} /* size of the rendered images */\n            background={'palettedvioletred'} /* color of background */\n          />\n          <ReactSpeech onText={(t) => console.log(t)}/>\n      </div>\n    );\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}